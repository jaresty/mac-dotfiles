list: user.customPrompt
# Copy this file into your user directory and add your own custom prompts
# Any prompts in this list are automatically added into the <user.modelPrompt> capture
-

# Example
coach: Evaluate this code with a focus on potential changes. Each unit of code should have only one reason to change. Identify areas for improvement to enhance the design.

split: Act as an editor. The text below covers multiple topics. Separate and organize these topics clearly. Return just the modified text.

guard: As a software engineer, refactor this code to handle error cases first. Use guard clauses or throw errors where appropriate. Return just the modified text for direct insertion into code.

shorten: As an editor, shorten the following text while preserving its meaning. Return just the modified text.

add API docs: As a software engineer, add API documentation to the following code. Include documentation for all parameters used. Return just the modified text.

flatten: As an editor, restructure the following text into a single, grammatically correct chunk. Interpret the current structure for clarity. Return just the modified text.

compare: This text contains similar ideas with subtle differences. Create a table listing each comparison once to highlight these differences. Omit ideas that appear only once. Return the response as a table for readability.

shuffle: Reorganize the following text while ensuring the new organization remains sensible. Change the categories to reflect single ideas without using conjunctions like "and" or "or." Return the text in the same language.

describe split: As an editor, suggest different ways to categorize or split the following text, which contains multiple interrelated topics. Return just the modified text.

make abstract: As an editor, make the following text operate at one level of abstraction by generalizing any specifics. If already abstract, make it even more abstract. Return just the modified text.

sort interest: As an editor, reorder the text so the most surprising or interesting part comes first. Maintain the current tone. Return just the modified text.

sort abstraction: As an editor, reorder the text from most to least abstract. Add transitions and labels for flow, ensuring it reads like a substitution in the same context. Return just the modified text.

sort complexity: As a software engineer, reorder the following code to place the most complex parts first. Return just the modified text.

sort direct: As an editor, reorder the text to be more direct. Lead with the main point and follow up with auxiliary information. Return just the modified text.

sort indirect: As an editor, reorder the text to be more indirect. Lead with auxiliary information and conclude with the main point. Return just the modified text.

fix duplication: As a software engineer, reduce duplication in the following code without changing its behavior. Return just the new code for direct insertion.

list obscure: As a reader, identify all terms in the following text that are not defined. Return just the list of terms.

list dependencies: As a reader, identify all dependencies in the following text and what they depend on. Consider something a dependency if both it and what it depends on are listed. Return just the list of dependencies.

generate liberated exercise: As a facilitator, design a problem-solving process for full group participation using liberating structures or similar techniques. Make it suitable for an online meeting with no more than three activities. Return just the process.

generate traditional exercise: As a facilitator, design a problem-solving process for full group participation without breakouts. Make it engaging and fun, suitable for an online meeting with no more than three activities. Return just the process.

format todo: As an organizational expert familiar with GTD, annotate each task in the following text with context and relative size tags. Output the tasks as a markdown todo list. Return just the tasks.

format heading: As an editor, create a heading that encapsulates the text below. Return just the heading.

format gherkin: As a product manager, reformat the following text into proper gherkin without adding new criteria. Use Jira markup for formatting. Return just the modified text.

format HTML: As a frontend web developer, format the following text as semantic HTML. Return just the formatted HTML.

format process: As a project manager, identify the process flow in the following text. Return just the flow.

assist me: I have a problem that I do not know how to solve. Help me think through a quick plan to solve this problem. What steps should I take so I can resolve this today?
